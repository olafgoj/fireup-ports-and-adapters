import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

plugins {
	id 'org.springframework.boot' version '2.4.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.github.davidmc24.gradle.plugin.avro-base" version "1.0.0"
	id 'java'
}

group = 'pl.olafgoj'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
	maven { url "http://packages.confluent.io/maven/" }
}

dependencies {


	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.kafka:spring-kafka'
	compile "org.apache.avro:avro:1.10.1"
	compile 'io.confluent:kafka-avro-serializer:5.0.0'

	implementation 'org.postgresql:postgresql'
	compileOnly "org.springframework.data:spring-data-rest-webmvc:3.4.5"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'


    // LOMBOK
	compileOnly 'org.projectlombok:lombok:1.18.16'
	annotationProcessor 'org.projectlombok:lombok:1.18.16'

	testCompileOnly 'org.projectlombok:lombok:1.18.16'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
}

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
	source("src/main/avro")
	outputDir = file("src/main/java")
}

tasks.named("compileJava").configure {
	source(generateAvro)
}

test {
	useJUnitPlatform()
}
